# -*- coding: utf-8 -*-
"""Untitled19.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dwcHcNWXNAdZnpJ0A7HjVr-zPl5mayPx
"""

def main() -> None:
    """
    Lê n matrizes de confusão e determina qual delas possui a maior acurácia.
    """

    # Tenta ler a quantidade de matrizes. Trata o caso de entrada vazia.
    try:
        n_input = input().strip()
        if not n_input:
            # Se a primeira linha estiver vazia, não há o que fazer.
            return
        n = int(n_input)
    except (ValueError, IndexError):
        # Se a entrada não for um número válido, encerra.
        return

    best_accuracy = -1.0  # Armazena a melhor acurácia encontrada
    best_index = -1       # Armazena o índice da matriz com a melhor acurácia

    # Itera sobre cada uma das n matrizes
    for idx in range(n):
        try:
            # Lê a linha com os valores TP, FP, FN, TN
            line = input().strip()
            if not line:
                # Pula linhas vazias, se houver
                continue

            tp, fp, fn, tn = map(int, line.split(','))

            # Calcula a acurácia da matriz atual
            # Adiciona uma verificação para evitar divisão por zero, embora improvável no contexto do problema.
            total = tp + fp + fn + tn
            if total == 0:
                accuracy = 0.0
            else:
                accuracy = (tp + tn) / total

            # Se a acurácia atual for a maior encontrada até agora, atualiza os valores
            if accuracy > best_accuracy:
                best_accuracy = accuracy
                best_index = idx

        except (ValueError, IndexError):
            # Se uma linha estiver mal formatada, ignora e continua para a próxima
            continue

    # Se ao menos uma matriz válida foi processada
    if best_index != -1:
        # Formata a acurácia para duas casas decimais e remove zeros finais desnecessários
        # Ex: 1.00 -> "1.00" -> "1." -> "1"
        # Ex: 0.95 -> "0.95" -> "0.95"
        # Ex: 0.90 -> "0.90" -> "0.9"
        accuracy_str = f"{best_accuracy:.2f}".rstrip('0').rstrip('.')

        # Imprime o resultado final no formato solicitado
        print(f"Index: {best_index}")
        print(f"Accuracy: {accuracy_str}")

if __name__ == "__main__":
    main()